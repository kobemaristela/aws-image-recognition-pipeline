Resources:
  # EC2 A - Car Recognition
  EC2InstanceA:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-005f9685cb30f234b  # Amazon Linux 2 AMI (us-east-1) - Kernel 5.10, SSD Volume Type
      InstanceType: t2.micro
      KeyName: CS442
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Name
          Value: CS442_A
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y git
            cd /home/ec2-user
            git clone https://github.com/kobemaristela/aws-image-recognition-pipeline.git
            cd aws-image-recognition-pipeline/
            pip3 install -r requirements.txt
  
  # EC2 B - Text Extraction
  EC2InstanceB:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-005f9685cb30f234b  # Amazon Linux 2 AMI (us-east-1) - Kernel 5.10, SSD Volume Type
      InstanceType: t2.micro
      KeyName: CS442
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Name
          Value: CS442_B
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y git
            cd /home/ec2-user
            git clone https://github.com/kobemaristela/aws-image-recognition-pipeline.git
            cd aws-image-recognition-pipeline/
            pip3 install -r requirements.txt

  # Security Group - Allow SSH, HTTP, HTTPS
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: CS442_Security_Group
      GroupDescription: Allow SSH, HTTP, HTTPS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0     # Add your own IP address
        - IpProtocol: tcp       # HTTP Access
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp       # HTTPS Access
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Instance Profile - Attached to EC2 instance
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: CS442_Profile
      Roles:
        - !Ref EC2InstanceRole

  # Instance Role - Attached to EC2 instance (Allows S3, SQS, Rekognition)
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CS442_EC2_Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess  # Only need to read from bucket
      - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess

  # SQS Queue - Car Recognized Queue
  CarQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      QueueName: car-recognition-queue.fifo

  #------------------------------------------------------------------------------------#
  # Part 2
  #------------------------------------------------------------------------------------#
  # SQS Queue - Person Recognized Queue
  PersonQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      QueueName: person-recognition-queue.fifo

  # Lambda Function - Person Detection
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: person-recognition-function
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: 30
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        ZipFile: |
          import boto3

          # Initiate sqs & rekognition client
          rekognition = boto3.client('rekognition', region_name='us-east-1')  # IMPORTANT - Global Region
          
          # Initiate SQS connection to car queue
          sqs = boto3.resource('sqs', region_name='us-east-1')
          queue = sqs.get_queue_by_name(QueueName='person-recognition-queue.fifo')

          def lambda_handler(event, context):
            for message in event['Records']:
              # Read incoming message from event trigger
              image = message['body']

              if image == "-1":
                print("Person Detection Complete...")
                queue.send_message(MessageBody="-1", MessageGroupId="person-recognition")
                return {'statusCode': 200, 'body': 'Person Detection Complete...'}

              # Label Detection using AWS Rekognition
              response = rekognition.detect_labels(
                Image={
                    'S3Object': {
                        'Bucket': 'cs442-unr',
                        'Name': image
                    }
                }
              )

              # Checks if car detected with confidence >= 90
              for label in response['Labels']:
                if label['Name'] == 'Person' and label['Confidence'] >= 90:
                  print(f'Person Image Found: {image}')
                  queue.send_message(MessageBody=image, MessageGroupId="person-recognition")
                  return {'statusCode': 200, 'body': f'Person Image Found: {image}'}

  # Lambda Role - Allows S3, SQS, Rekognition
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CS442_Lambda_Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess  # Only need to read from bucket
      - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess

  # Trigger Setup - Car Queue to Lambda Function
  EventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt CarQueue.Arn
      FunctionName: !Ref LambdaFunction